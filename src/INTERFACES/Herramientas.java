/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package INTERFACES;

import ConexionBD.Conexion;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Paola Barrera Tenorio 2192007348
 */
public class Herramientas extends javax.swing.JFrame {

    /**
     * Creates new form Herramienta
     */
    public Herramientas() {
        initComponents();
        
        this.setTitle("Panificadora La Izcalli");
        this.setLocationRelativeTo(Herramientas.this);
        this.setResizable(false);
        
        Mostrar("Herramientas");
        LimpiarCampos();
        TxtFields();
        txtArea.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblHerramientas = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnRegresarH = new javax.swing.JButton();
        lblNombreH = new javax.swing.JLabel();
        lblCantidadH = new javax.swing.JLabel();
        lblMaterialH = new javax.swing.JLabel();
        lblEstadoH = new javax.swing.JLabel();
        txtNombreH = new javax.swing.JTextField();
        txtCantidadH = new javax.swing.JTextField();
        txtMaterialH = new javax.swing.JTextField();
        txtEstadoH = new javax.swing.JTextField();
        btnBuscarH = new javax.swing.JButton();
        btnAgregarH = new javax.swing.JButton();
        btnActualizarH = new javax.swing.JButton();
        btnEliminarH = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaHerramientas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnRegreso = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 245, 225));

        jPanel2.setBackground(new java.awt.Color(1, 87, 155));

        lblHerramientas.setFont(new java.awt.Font("STLiti", 0, 48)); // NOI18N
        lblHerramientas.setForeground(new java.awt.Color(255, 255, 255));
        lblHerramientas.setText("- Herramientas -");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(lblHerramientas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblHerramientas)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(1, 87, 155));

        btnRegresarH.setBackground(new java.awt.Color(255, 245, 225));
        btnRegresarH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnRegresarH.setText("Regresar al menú");
        btnRegresarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnRegresarH)
                .addContainerGap(802, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(btnRegresarH)
                .addGap(37, 37, 37))
        );

        lblNombreH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        lblNombreH.setText("Nombre");

        lblCantidadH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        lblCantidadH.setText("Cantidad");

        lblMaterialH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        lblMaterialH.setText("Material");

        lblEstadoH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        lblEstadoH.setText("Estado");

        txtNombreH.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N

        txtCantidadH.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N

        txtMaterialH.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N

        txtEstadoH.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N

        btnBuscarH.setBackground(new java.awt.Color(1, 87, 155));
        btnBuscarH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnBuscarH.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscarH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar.png"))); // NOI18N
        btnBuscarH.setText("Buscar");
        btnBuscarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarHActionPerformed(evt);
            }
        });

        btnAgregarH.setBackground(new java.awt.Color(1, 87, 155));
        btnAgregarH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnAgregarH.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Agregar.png"))); // NOI18N
        btnAgregarH.setText("Agregar");
        btnAgregarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarHActionPerformed(evt);
            }
        });

        btnActualizarH.setBackground(new java.awt.Color(1, 87, 155));
        btnActualizarH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnActualizarH.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Actualizar.png"))); // NOI18N
        btnActualizarH.setText("Actualizar");
        btnActualizarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarHActionPerformed(evt);
            }
        });

        btnEliminarH.setBackground(new java.awt.Color(1, 87, 155));
        btnEliminarH.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnEliminarH.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/borrar.png"))); // NOI18N
        btnEliminarH.setText("Eliminar");
        btnEliminarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarHActionPerformed(evt);
            }
        });

        TablaHerramientas.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N
        TablaHerramientas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaHerramientas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaHerramientasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaHerramientas);

        txtArea.setBackground(new java.awt.Color(255, 245, 225));
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Bell MT", 0, 14)); // NOI18N
        txtArea.setRows(5);
        txtArea.setText("BUSCAR HERRAMIENTA\nEscriba su nombre y presione el botón buscar \n\nAGREGAR HERRAMIENTA\nLlene todos los campos con su información y presione agregar\n\nACTUALIZAR DATOS\nSeleccione el registro en la tabla, modifique el dato y presione el botón editar\n\nELIMINAR HERRAMIENTA\nSeleccione el registro y presione el botón eliminar");
        jScrollPane2.setViewportView(txtArea);

        btnRegreso.setBackground(new java.awt.Color(1, 87, 155));
        btnRegreso.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        btnRegreso.setForeground(new java.awt.Color(255, 255, 255));
        btnRegreso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Regreso.png"))); // NOI18N
        btnRegreso.setText("Regresar");
        btnRegreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAgregarH, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(btnBuscarH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 984, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnActualizarH, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblMaterialH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMaterialH, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblEstadoH)
                                .addGap(18, 18, 18)
                                .addComponent(txtEstadoH))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblNombreH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNombreH))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblCantidadH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantidadH, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(129, 129, 129)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRegreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminarH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreH)
                            .addComponent(txtNombreH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCantidadH)
                            .addComponent(txtCantidadH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaterialH)
                            .addComponent(txtMaterialH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEstadoH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEstadoH)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizarH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarH)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarH)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarH)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegreso)))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarHActionPerformed
        MenuInventario inventario = new MenuInventario();
        inventario.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRegresarHActionPerformed

//Botón Agregar Herramienta
    private void btnAgregarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarHActionPerformed
        AgregarHerramienta();
    }//GEN-LAST:event_btnAgregarHActionPerformed
    
    
//------------------------------------------------------------------------------
    //Autollenado de los campos al seleccionar un registro
//------------------------------------------------------------------------------
    private void TablaHerramientasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaHerramientasMouseClicked
        try{
            int fila = TablaHerramientas.getSelectedRow();
            int id = Integer.parseInt(TablaHerramientas.getValueAt(fila, 0).toString());
            
            PreparedStatement ps;
            ResultSet rs;
            
            java.sql.Connection con =  Conexion.conectar();
            ps = con.prepareStatement("SELECT H_Nombre, H_Cantidad, H_Material, H_Estado FROM herramientas WHERE idHerramientas=?");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            
            while(rs.next()){
            txtNombreH.setText(rs.getString("H_Nombre"));
            txtCantidadH.setText(rs.getString("H_Cantidad"));
            txtMaterialH.setText(rs.getString("H_Material"));
            txtEstadoH.setText(rs.getString("H_Estado"));
            }
       
       }catch(SQLException e){
           JOptionPane.showMessageDialog(null, e);
       }
    }//GEN-LAST:event_TablaHerramientasMouseClicked
//------------------------------------------------------------------------------
    
    
//Botón Actualizar Herramienta
    private void btnActualizarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarHActionPerformed
        ActualizarHerramienta();
    }//GEN-LAST:event_btnActualizarHActionPerformed
    
//Botón Eliminar Herramienta
    private void btnEliminarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarHActionPerformed
        EliminarHerramienta();
    }//GEN-LAST:event_btnEliminarHActionPerformed

//Botón Buscar Herramienta
    private void btnBuscarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarHActionPerformed
        BuscarHerramienta();
    }//GEN-LAST:event_btnBuscarHActionPerformed

//Botón Regresar
    private void btnRegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresoActionPerformed
        LimpiarCampos();
        Mostrar("herramientas");
    }//GEN-LAST:event_btnRegresoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Herramientas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Herramientas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Herramientas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Herramientas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Herramientas().setVisible(true);
            }
        });
    }
    
    
//------------------------------------------------------------------------------
    //Método para mostrar los registros en la tabla Herramientas
//------------------------------------------------------------------------------
    public void Mostrar(String tabla) {
    String sql = "SELECT * FROM " + tabla;
    Conexion con = new Conexion();
    java.sql.Connection conexion = con.conectar();

    DefaultTableModel model = new DefaultTableModel();
    String[] columnas = {"ID", "Nombre", "Cantidad", "Material", "Estado"};
    
    
    for (String columna : columnas) {
        model.addColumn(columna);
    }

    TablaHerramientas.setRowSorter(null);
    TablaHerramientas.setModel(model);

    try (java.sql.Statement st = conexion.createStatement(); ResultSet rs = st.executeQuery(sql)) {
        while (rs.next()) {
            String[] datos = new String[columnas.length];
            for (int i = 0; i < columnas.length; i++) {
                datos[i] = rs.getString(i + 1);
            }
          
            model.addRow(datos);
        }
        
        // Modificar el ancho de las columnas
        TableColumnModel modeloColumnas = TablaHerramientas.getColumnModel();
        modeloColumnas.getColumn(0).setPreferredWidth(1);  // ID
        modeloColumnas.getColumn(1).setPreferredWidth(10); // Nombre
        modeloColumnas.getColumn(2).setPreferredWidth(10); // Cantidad
        modeloColumnas.getColumn(3).setPreferredWidth(10); // Material
        modeloColumnas.getColumn(4).setPreferredWidth(30); // Estado
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error en executeQuery: " + e.getMessage());
    } finally {
        try {
            if (conexion != null && !conexion.isClosed()) {
                conexion.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + ex.getMessage());
        }
    }
} 
//------------------------------------------------------------------------------
    
    
//------------------------------------------------------------------------------
    //Método para agregar registros a la tabla
//------------------------------------------------------------------------------

private void AgregarHerramienta(){

String nombreHerramientas = txtNombreH.getText();
    int cantidadHerramientas = Integer.parseInt(txtCantidadH.getText()); 
    String materialHerramientas = txtMaterialH.getText();
    String estadoHerramientas = txtEstadoH.getText(); 
    
  
    try {
        java.sql.Connection con =  Conexion.conectar(); 
        PreparedStatement ps = con.prepareStatement("INSERT INTO herramientas (H_Nombre, H_Cantidad, H_Material, H_Estado) VALUES (?,?,?,?)");

        ps.setString(1, nombreHerramientas);
        ps.setInt(2, cantidadHerramientas);
        ps.setString(3, materialHerramientas);
        ps.setString(4, estadoHerramientas);
         
        ps.executeUpdate();
        JOptionPane.showMessageDialog(null, "Registro guardado");
        
        //Actualizar la tabla para que aparezca el registro nuevo
        Mostrar("herramientas");
        
        //Después de guardar el registro limpiar los campos 
        LimpiarCampos();
        
        con.close(); // Cierra la conexión

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar: " + e.getMessage());
    }

}
//--------------------------------------------------------------------------------


//------------------------------------------------------------------------------
    //Método de actualizar los registros de la tabla
//------------------------------------------------------------------------------ 

private void ActualizarHerramienta(){

int fila = TablaHerramientas.getSelectedRow();
    int id = Integer.parseInt(TablaHerramientas.getValueAt(fila, 0).toString());
    String nombreHerramientas = txtNombreH.getText();
    int cantidadHerramientas = Integer.parseInt(txtCantidadH.getText()); 
    String materialHerramientas = txtMaterialH.getText();
    String estadoHerramientas = txtEstadoH.getText(); 
    
   
    try {
        java.sql.Connection con =  Conexion.conectar(); 
        PreparedStatement ps = con.prepareStatement("UPDATE herramientas SET H_Nombre=?, H_Cantidad=?, H_Material=?, H_Estado=? WHERE idHerramientas=?");

        ps.setString(1, nombreHerramientas);
        ps.setInt(2, cantidadHerramientas);
        ps.setString(3, materialHerramientas);
        ps.setString(4, estadoHerramientas);
        ps.setInt(5,id);
        
        ps.executeUpdate();
        JOptionPane.showMessageDialog(null, "Registro actualizado");
        
        //Actualizar la tabla para que aparezca el registro nuevo
        Mostrar("herramientas");
        
        //Después de actualizar el registro, limpia los campos 
        LimpiarCampos();
        
        con.close(); // Cierra la conexión

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar: " + e.getMessage());
    }

}
//-------------------------------------------------------------------------------


//------------------------------------------------------------------------------
    //Método para eliminar un registro de la tabla
//------------------------------------------------------------------------------

private void EliminarHerramienta(){

    int fila = TablaHerramientas.getSelectedRow();
    int id = Integer.parseInt(TablaHerramientas.getValueAt(fila, 0).toString());
    
    try {
        java.sql.Connection con =  Conexion.conectar(); 
        PreparedStatement ps = con.prepareStatement("DELETE FROM herramientas WHERE idHerramientas=?");

        ps.setInt(1, id);

        ps.executeUpdate();
        JOptionPane.showMessageDialog(null, "Registro eliminado");
        
        //Actualizar la tabla para que aparezca el registro nuevo
        Mostrar("herramientas");
        
        //Después de actualizar el registro, limpia los campos 
        LimpiarCampos();
        
        con.close(); // Cierra la conexión

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar: " + e.getMessage());
    }

}
//-------------------------------------------------------------------------------
    

//------------------------------------------------------------------------------
    //Método para buscar un registro de la tabla 
//------------------------------------------------------------------------------

private void BuscarHerramienta(){

TableRowSorter<TableModel> sorter = new TableRowSorter<>(TablaHerramientas.getModel());
    TablaHerramientas.setRowSorter(sorter);
    
    String textoBusqueda = txtNombreH.getText().trim();
    
    if (textoBusqueda.isEmpty()) {
        sorter.setRowFilter(null); // Muestra todos los registros si el campo está vacío
    } else {
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + textoBusqueda)); // Filtra ignorando mayúsculas/minúsculas
    }

    
}
//-------------------------------------------------------------------------------


//------------------------------------------------------------------------------
    //Método para limpiar los campos
//------------------------------------------------------------------------------
private void LimpiarCampos(){

        txtNombreH.setText("");
        txtCantidadH.setText("");
        txtMaterialH.setText("");
        txtEstadoH.setText("");

}
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
    //Método para limitar a escribir solo números en los Textfield
//------------------------------------------------------------------------------
    private void limitarNumeros(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) { // Solo permite números
                    e.consume(); // Bloquea la entrada si no es un número
                }
            }
        });
    }
//------------------------------------------------------------------------------
    
    
//------------------------------------------------------------------------------
    //Método para txtFields
//------------------------------------------------------------------------------
    private void TxtFields(){
    
    limitarNumeros(txtCantidadH);
 
    }
//------------------------------------------------------------------------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaHerramientas;
    private javax.swing.JButton btnActualizarH;
    private javax.swing.JButton btnAgregarH;
    private javax.swing.JButton btnBuscarH;
    private javax.swing.JButton btnEliminarH;
    private javax.swing.JButton btnRegresarH;
    private javax.swing.JButton btnRegreso;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCantidadH;
    private javax.swing.JLabel lblEstadoH;
    private javax.swing.JLabel lblHerramientas;
    private javax.swing.JLabel lblMaterialH;
    private javax.swing.JLabel lblNombreH;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCantidadH;
    private javax.swing.JTextField txtEstadoH;
    private javax.swing.JTextField txtMaterialH;
    private javax.swing.JTextField txtNombreH;
    // End of variables declaration//GEN-END:variables
}
